version: '3.8'
services:
  postgres-products:
    image: postgres:15
    container_name: postgres-products
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: products_db
    ports:
      - '5432:5432'
    networks:
      - backend
    volumes:
      - pgdata-products:/var/lib/postgresql/data

  postgres-orders:
    image: postgres:15
    container_name: postgres-orders
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: orders_db
    ports:
      - '5433:5432'
    networks:
      - backend
    volumes:
      - pgdata-orders:/var/lib/postgresql/data

  products:
    build:
      context: .
      dockerfile: apps/products/Dockerfile
    container_name: products
    environment:
      DB_HOST: postgres-products
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: products_db
    ports:
      - '3001:3000'
    depends_on:
      - postgres-products
    networks:
      - backend

  orders:
    build:
      context: .
      dockerfile: apps/orders/Dockerfile
    container_name: orders
    environment:
      DB_HOST: postgres-orders
      DB_PORT: 5432
      DB_USERNAME: postgres
      DB_PASSWORD: postgres
      DB_DATABASE: orders_db
    ports:
      - '3002:3000'
    depends_on:
      - postgres-orders
    networks:
      - backend

  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: api-gateway
    environment:
      PRODUCTS_SERVICE_URL: http://products:3000/api/products
      ORDERS_SERVICE_URL: http://orders:3000/api/orders
    ports:
      - '3000:3000'
    depends_on:
      - products
      - orders
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  pgdata-products:
  pgdata-orders:
